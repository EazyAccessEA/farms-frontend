name: PuredgeOS 2.0 Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # PuredgeOS 2.0: Clarity Gate (Lighthouse Budgets)
  clarity-gate:
    name: Clarity Quantification Engine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm start &
        env:
          PORT: 3000
      
      - name: Wait for application
        run: sleep 30
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/map
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.lighthouserc.json'
      
      - name: Check Lighthouse budgets
        run: |
          if [ -f "lighthouse-results.json" ]; then
            echo "Lighthouse results:"
            cat lighthouse-results.json | jq '.'
            
            # Check LCP budget
            LCP=$(cat lighthouse-results.json | jq -r '.lighthouseResults[0].audits["largest-contentful-paint"].numericValue')
            if (( $(echo "$LCP > 1800" | bc -l) )); then
              echo "‚ùå LCP exceeds 1800ms budget: ${LCP}ms"
              exit 1
            else
              echo "‚úÖ LCP within budget: ${LCP}ms"
            fi
            
            # Check INP budget
            INP=$(cat lighthouse-results.json | jq -r '.lighthouseResults[0].audits["interaction-to-next-paint"].numericValue')
            if (( $(echo "$INP > 200" | bc -l) )); then
              echo "‚ùå INP exceeds 200ms budget: ${INP}ms"
              exit 1
            else
              echo "‚úÖ INP within budget: ${INP}ms"
            fi
            
            # Check CLS budget
            CLS=$(cat lighthouse-results.json | jq -r '.lighthouseResults[0].audits["cumulative-layout-shift"].numericValue')
            if (( $(echo "$CLS > 0.1" | bc -l) )); then
              echo "‚ùå CLS exceeds 0.1 budget: ${CLS}"
              exit 1
            else
              echo "‚úÖ CLS within budget: ${CLS}"
            fi
          fi

  # PuredgeOS 2.0: Accessibility Gate (Playwright + Axe)
  a11y-gate:
    name: Accessibility Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm start &
        env:
          PORT: 3000
      
      - name: Wait for application
        run: sleep 30
      
      - name: Run Playwright accessibility tests
        run: |
          npx playwright install
          npx playwright test --config=tests/a11y.config.ts
      
      - name: Run Axe-core tests
        run: |
          npm install -g axe-core
          npx axe http://localhost:3000 --exit
          npx axe http://localhost:3000/map --exit

  # PuredgeOS 2.0: Bundle Gate
  bundle-gate:
    name: Bundle Size & Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Check bundle size
        run: |
          # Install size-limit
          npm install -g size-limit
          
          # Check bundle size
          npx size-limit --limit 180kb
      
      - name: Check for unused code
        run: |
          # Install ts-prune
          npm install -g ts-prune
          
          # Check for unused exports
          npx ts-prune --error
      
      - name: Check for dead code
        run: |
          # Install webpack-bundle-analyzer
          npm install -g webpack-bundle-analyzer
          
          # Analyze bundle
          npx webpack-bundle-analyzer .next/static/chunks/*.js --mode static --report

  # PuredgeOS 2.0: Type Safety Gate
  type-gate:
    name: Type Safety & Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Lint code
        run: npm run lint
      
      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate

  # PuredgeOS 2.0: Visual Regression Gate
  visual-gate:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm start &
        env:
          PORT: 3000
      
      - name: Wait for application
        run: sleep 30
      
      - name: Run visual regression tests
        run: |
          npx playwright install
          npx playwright test --config=tests/visual.config.ts

  # PuredgeOS 2.0: Performance Budget Gate
  performance-gate:
    name: Performance Budgets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start application
        run: npm start &
        env:
          PORT: 3000
      
      - name: Wait for application
        run: sleep 30
      
      - name: Run performance tests
        run: |
          # Install autocannon for load testing
          npm install -g autocannon
          
          # Test homepage performance
          autocannon -c 10 -d 5 http://localhost:3000
          
          # Test map page performance
          autocannon -c 10 -d 5 http://localhost:3000/map

  # PuredgeOS 2.0: Security Gate
  security-gate:
    name: Security & Supply Chain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Check for known vulnerabilities
        run: |
          # Install snyk
          npm install -g snyk
          
          # Test for vulnerabilities
          snyk test
      
      - name: Generate SBOM
        run: |
          # Install syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM
          syft packages . -o json > sbom.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  # PuredgeOS 2.0: Quality Summary
  quality-summary:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [clarity-gate, a11y-gate, bundle-gate, type-gate, visual-gate, performance-gate, security-gate]
    if: always()
    steps:
      - name: Quality Gates Status
        run: |
          echo "üöÄ PuredgeOS 2.0 Quality Gates Summary"
          echo "======================================"
          echo ""
          echo "Clarity Gate: ${{ needs.clarity-gate.result }}"
          echo "Accessibility Gate: ${{ needs.a11y-gate.result }}"
          echo "Bundle Gate: ${{ needs.bundle-gate.result }}"
          echo "Type Safety Gate: ${{ needs.type-gate.result }}"
          echo "Visual Regression Gate: ${{ needs.visual-gate.result }}"
          echo "Performance Gate: ${{ needs.performance-gate.result }}"
          echo "Security Gate: ${{ needs.security-gate.result }}"
          echo ""
          
          if [[ "${{ needs.clarity-gate.result }}" == "success" && 
                "${{ needs.a11y-gate.result }}" == "success" && 
                "${{ needs.bundle-gate.result }}" == "success" && 
                "${{ needs.type-gate.result }}" == "success" && 
                "${{ needs.visual-gate.result }}" == "success" && 
                "${{ needs.performance-gate.result }}" == "success" && 
                "${{ needs.security-gate.result }}" == "success" ]]; then
            echo "‚úÖ ALL QUALITY GATES PASSED - PuredgeOS 2.0 Compliance Achieved!"
            echo "üéØ God-tier UX standards maintained"
          else
            echo "‚ùå Some quality gates failed - PuredgeOS 2.0 standards not met"
            echo "üîß Please address the failing gates before merging"
            exit 1
          fi
